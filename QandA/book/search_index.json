[
["r6.html", "Chapter 14 R6 14.2 Classes and methods 14.2.2 Important methods Exercises 14.2.6.4 14.3.2 Active fields 14.4 Reference semantics", " Chapter 14 R6 14.2 Classes and methods Any … R6 method called for its side effects … should return invisible(self). WHY? What is invisible(self) doing in the add function below? I tried removing this line but it doesn’t change the output… Accumulator &lt;- R6Class(&quot;Accumulator&quot;, list( sum = 0, add = function(x = 1) { self$sum &lt;- self$sum + x invisible(self) }) ) x &lt;- Accumulator$new() 14.2.2 Important methods Why don’t we need to specifically call haldey2$print to see the output below)? Is the print method just a built in output of an R6 object? Person &lt;- R6Class(&quot;Person&quot;, list( name = NULL, age = NA, initialize = function(name, age = NA) { self$name &lt;- name self$age &lt;- age }, print = function(...) { cat(&quot;Person: \\n&quot;) cat(&quot; Name: &quot;, self$name, &quot;\\n&quot;, sep = &quot;&quot;) cat(&quot; Age: &quot;, self$age, &quot;\\n&quot;, sep = &quot;&quot;) #invisible(self) } )) hadley2 &lt;- Person$new(&quot;Hadley&quot;) hadley2 Person: Name: Hadley Age: NA Exercises 14.2.6.4 Why can’t we use method chaining to access the current time zone? Timezone &lt;- R6Class( classname = &quot;Timezone&quot;, public = list( get = function() { Sys.timezone() }, set = function(value) { stopifnot(value %in% OlsonNames()) old &lt;- self$get() Sys.setenv(TZ = value) invisible(old) }) ) tz &lt;- Timezone$new() old &lt;- tz$set(&quot;Antarctica/South_Pole&quot;) tz$get() [1] &quot;America/Los_Angeles&quot; tz$set(&quot;Antarctica/South_Pole&quot;)$get() Error in tz$set(&quot;Antarctica/South_Pole&quot;)$get : $ operator is invalid for atomic vectors Timezone &lt;- R6Class( classname = &quot;Timezone&quot;, public = list( current_zone = Sys.timezone(), get = function() { Sys.timezone() self$current_zone &lt;- Sys.timezone() }, set = function(value) { stopifnot(value %in% OlsonNames()) old &lt;- self$get() Sys.setenv(TZ = value) self$current_zone &lt;- Sys.setenv(TZ = value) invisible(old) }) ) tz &lt;- Timezone$new() tz$set(&quot;Antarctica/South_Pole&quot;)$current_zone 14.3.2 Active fields Why can we write over the $name but not $age methods when both are part of the active list? Person &lt;- R6Class(&quot;Person&quot;, private = list( .age = NA, .name = NULL ), active = list( age = function(value) { if (missing(value)) { private$.age } else { stop(&quot;`$age` is read only&quot;, call. = FALSE) } }, name = function(value) { if (missing(value)) { private$.name } else { stopifnot(is.character(value), length(value) == 1) private$.name &lt;- value self } } ), public = list( initialize = function(name, age = NA) { private$.name &lt;- name private$.age &lt;- age } ) ) hadley4 &lt;- Person$new(&quot;Hadley&quot;, age = 38) hadley4$name &lt;- &quot;Maya&quot; hadley4$name [1] &quot;Maya&quot; hadley4$age &lt;- 20 Error: `$age` is read only 14.4 Reference semantics $clone() does not recursively clone nested R6 objects. If you want that, you’ll need to use $clone(deep = TRUE). Can we see this in action using a subclass? A &lt;- R6Class( classname = &quot;A&quot;, public = list( field = &quot;foo&quot;, method = function() { &quot;bar&quot; } ) ) B &lt;- A$new() C &lt;- B$clone(deep = FALSE) "]
]
